const { Telegraf } = require('telegraf');
const cron = require('node-cron');
require("dotenv").config({ path: "./config/.env" });
const bot = new Telegraf(process.env.TELE_BOT_TOKEN);
require("./routes/adminRoute");

// MongoDB setup
require("./database/connection/connection");
const User = require("./database/schema/User");

// Controller and middleware import
const { convert_in_indian_date, convert_in_indian_time } = require("./controller/moment_timezone");
const fetch_Weather_data = require("./controller/fetch_weather_axios");
const { ms_To_kmh_Convert, m_To_km_Convert } = require("./controller/convert_units");
const deg_to_direction = require("./controller/compass-direction");
const weather_icon = require("./middleware/weather_icon");

const userStates = {};

// Function to send weather updates to users
async function sendWeatherUpdates() {
    try {
        const users = await User.find({block: false});
        for (const user of users) {
            const weatherData = await fetch_Weather_data(user.city, user.country);
            if (weatherData) {
                let date = convert_in_indian_date(weatherData.dt);
                let time = convert_in_indian_time(weatherData.dt);
                let icon = weather_icon(weatherData.weather[0].icon);
                let Sunrise = convert_in_indian_time(weatherData.sys.sunrise);
                let Sunset = convert_in_indian_time(weatherData.sys.sunset);
                let visibility = m_To_km_Convert(weatherData.visibility);
                let windSpeed = ms_To_kmh_Convert(weatherData.wind.speed);
                let direction = deg_to_direction(weatherData.wind.deg);

                const message = `
⏰ Time : ${time}    📅 Date :${date}

Hello 👤${user.name} 

Place :📍${user.city}, 🌍 ${user.country}

${weatherData.weather[0].description} ${icon}

📑 Description : ${weatherData.weather[0].description} 

🌡️ Temperature : ${weatherData.main.temp}°C

🔼 Max: ${weatherData.main.temp_max}°C            🔽 Min: ${weatherData.main.temp_min}°C

💧 Humidity : ${weatherData.main.humidity}%

👁️ Visibility : ${visibility} km 

🌬️ Wind : ${windSpeed} km/h, ${direction}

🌅 Sunrise : ${Sunrise}

🌇 Sunset : ${Sunset}`;

                // Sending message to the user
                bot.telegram.sendMessage(user.chatId, message);
            }
        }
    } catch (error) {
        console.error('Error sending weather updates:', error);
    }
}

// Schedule sending weather updates daily
cron.schedule('* * * * *', () => {
    sendWeatherUpdates();
});


// get user data and save to database
bot.start(async (tele_message) => {
    const chatId = tele_message.chat.id;

    try {
        let user = await User.findOne({ chatId });

        if (user) {
            tele_message.reply('You have already provided your information. You will receive daily weather updates.');
            return;
        }

        tele_message.reply('Welcome!');
        tele_message.reply('Hello, I am Weather Bot and I am generated By Durgesh Bisen');
        tele_message.reply('What is your name?');

        userStates[chatId] = { step: 'askName' };
    } catch (error) {
        console.error('Error:', error);
        tele_message.reply('Sorry, something went wrong. Please try again later.');
    }
});

bot.on('text', async (tele_message) => {
    const chatId = tele_message.chat.id;
    const userState = userStates[chatId];

    try {
        if (!userState) return;

        let user;

        switch (userState.step) {
            case 'askName':
                user = await User.findOne({ chatId });

                if (!user) {
                    user = new User({
                        chatId: chatId,
                        name: tele_message.message.text
                    });

                    await user.save();
                }

                tele_message.reply('Thanks! What city are you from?');
                userStates[chatId].step = 'askCity';
                break;

            case 'askCity':
                user = await User.findOne({ chatId });

                if (user) {
                    user.city = tele_message.message.text;
                    await user.save();
                }

                tele_message.reply('Got it! What country are you from?');
                userStates[chatId].step = 'askCountry';
                break;

            case 'askCountry':
                user = await User.findOne({ chatId });

                if (user) {
                    user.country = tele_message.message.text;
                    await user.save();
                }

                tele_message.reply('Thanks for providing your information! You will now receive daily weather updates.');
                delete userStates[chatId];
                break;

            default:
                tele_message.reply('Sorry, something went wrong.');
                break;
        }
    } catch (error) {
        console.error('Error:', error);
        tele_message.reply('Sorry, something went wrong. Please try again later.');
    }
});

bot.launch();
